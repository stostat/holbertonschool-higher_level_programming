=======================================
matrix_divided test in  2-matrix_divided.py
=======================================

function:
``matrix_divided()``

Usage
=======

``matrix_divided()`` returns the division of its arguments.  For numbers,
that value is equivalent to using the ``/`` operator.

::

    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

::
tests with only one value
::
    >>> matrix = [[1, 2, 3], [4, 5, 6]]

    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> matrix_divided(matrix, -1)
    [[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]]

    >>> matrix_divided(matrix, 2.50)
    [[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

::
test with no value or bad syntax
::

    >>> matrix_divided()
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

    >>> matrix_divided(, 0)
    Traceback (most recent call last):
    SyntaxError: invalid syntax

    >>> matrix_divided(12, None)
    Traceback (most recent call last):
    TypeError: 'int' object is not iterable

    >>> matrix_divided(None, None)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::
Test with different type of value
::

    >>> matrix_divided('a')
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    >>> matrix_divided(matrix, 'nine')
    Traceback (most recent call last):
    TypeError: div must be a number

::
Test with more arguments
::

    >>> matrix_divided(1, 98, 3)
    Traceback (most recent call last):
    TypeError: matrix_divided() takes 2 positional arguments but 3 were given

    >>> matrix_divided('mine', 'a', 'b')
    Traceback (most recent call last):
    TypeError: matrix_divided() takes 2 positional arguments but 3 were given

::
Test with list, tuple, dictionary given
::

    >>> matrix_divided(matrix, [1,3])
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided(matrix, (1,3))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided(matrix, {'k1': 98, 'k2': 100})
    Traceback (most recent call last):
    TypeError: div must be a number

::
Test casting
::

    >>> matrix_divided(matrix, float(98))
    [[0.01, 0.02, 0.03], [0.04, 0.05, 0.06]]

    >>> matrix_divided(float('abc'))
    Traceback (most recent call last):
    ValueError: could not convert string to float: 'abc'

::
Division by 0
::

    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
